import os
from pathlib import Path
import gi
gi.require_version('Gst', '1.0')
from gi.repository import Gst, GLib
import hailo
from hailo_apps.hailo_app_python.core.gstreamer.gstreamer_app import app_callback_class
from hailo_apps.hailo_app_python.apps.detection_simple.pipeline_process_topview import GStreamerDetectionApp
from PIL import Image, ImageDraw, ImageFont
import numpy as np

SAVE_PATH = "/home/brisk/netdrive/01-Organize/01-Management/01-Data Center/Brisk/06-AI & Machine Learning (D0340)/04-IOT_Smartfarm/picture_result_topview"
os.makedirs(SAVE_PATH, exist_ok=True)

MAX_SAVED_FILES = 1 

class user_app_callback_class(app_callback_class):
    def __init__(self):
        super().__init__()
        self.saved_files = 0
        self.app_instance = None
    
    def set_app_instance(self, app):
        self.app_instance = app
    
    def increment_saved_files(self):
        self.saved_files += 1
        return self.saved_files

def app_callback(pad, info, user_data):
    user_data.increment()  
    string_to_print = f"Frame count: {user_data.get_count()}\n"
    buffer = info.get_buffer()  
    if buffer is None:  
        return Gst.PadProbeReturn.OK
    
    detections = hailo.get_roi_from_buffer(buffer).get_objects_typed(hailo.HAILO_DETECTION)
    
    if detections:
        caps = pad.get_current_caps()
        structure = caps.get_structure(0)
        width = structure.get_value("width")
        height = structure.get_value("height")
        data = buffer.extract_dup(0, buffer.get_size())
        
        np_image = np.frombuffer(data, dtype=np.uint8).reshape((height, width, 3))
        image = Image.fromarray(np_image)
        draw = ImageDraw.Draw(image)
        
        try:
            font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 20)
        except:
            font = ImageFont.load_default()
        
        for detection in detections:
            bbox = detection.get_bbox()
            label = detection.get_label()
            confidence = detection.get_confidence()
            
            x1 = int(bbox.xmin() * width)
            y1 = int(bbox.ymin() * height)
            x2 = int(bbox.xmax() * width)
            y2 = int(bbox.ymax() * height)
            
            draw.rectangle([x1, y1, x2, y2], outline="blue", width=2)
            
            text = f"{label} {confidence:.0%}"
            
            bbox_text = draw.textbbox((0, 0), text, font=font)
            text_width = bbox_text[2] - bbox_text[0]
            text_height = bbox_text[3] - bbox_text[1]
            
            text_y = max(y1 - text_height - 5, 0)
            draw.rectangle([x1, text_y, x1 + text_width + 10, text_y + text_height + 5], fill="blue")
            
            draw.text((x1 + 5, text_y + 2), text, fill="white", font=font)
            
            string_to_print += (f"Detection: {label} Confidence: {confidence:.2f} Box: ({x1},{y1},{x2},{y2})\n")
        
        image_path = os.path.join(SAVE_PATH, f"result_topview_{user_data.get_count()}.jpg")
        image.save(image_path)
        
        saved_count = user_data.increment_saved_files()
        
        string_to_print += f"Image saved to: {image_path}\n"
        string_to_print += f"Saved files: {saved_count}/{MAX_SAVED_FILES}\n"
        print(string_to_print)
        
        if saved_count >= MAX_SAVED_FILES:
            print(f"Reached maximum saved files ({MAX_SAVED_FILES}). Stopping application...")
            if user_data.app_instance and user_data.app_instance.pipeline:
                user_data.app_instance.pipeline.send_event(Gst.Event.new_eos())
            return Gst.PadProbeReturn.OK
            
    else:
        print(f"Frame count: {user_data.get_count()} - No detections")
    
    return Gst.PadProbeReturn.OK

if __name__ == "__main__":
    project_root = Path(__file__).resolve().parent.parent
    env_file     = project_root / ".env"
    env_path_str = str(env_file)
    os.environ["HAILO_ENV_FILE"] = env_path_str
    user_data = user_app_callback_class()
    app = GStreamerDetectionApp(app_callback, user_data)

    user_data.set_app_instance(app)
    app.run()

