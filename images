# region imports
import os
from pathlib import Path
import gi
gi.require_version('Gst', '1.0')
from gi.repository import Gst

import setproctitle
import hailo
import numpy as np
from PIL import Image, ImageDraw, ImageFont

# Hailo app imports
from hailo_apps.hailo_app_python.core.common.installation_utils import detect_hailo_arch
from hailo_apps.hailo_app_python.core.common.core import get_default_parser, get_resource_path
from hailo_apps.hailo_app_python.core.common.defines import (
    RESOURCES_VIDEOS_DIR_NAME, SIMPLE_DETECTION_VIDEO_NAME,
    SIMPLE_DETECTION_APP_TITLE, SIMPLE_DETECTION_PIPELINE,
    RESOURCES_MODELS_DIR_NAME, RESOURCES_SO_DIR_NAME,
    SIMPLE_DETECTION_POSTPROCESS_SO_FILENAME, SIMPLE_DETECTION_POSTPROCESS_FUNCTION
)
from hailo_apps.hailo_app_python.core.gstreamer.gstreamer_helper_pipelines import (
    INFERENCE_PIPELINE, USER_CALLBACK_PIPELINE
)
from hailo_apps.hailo_app_python.core.gstreamer.gstreamer_app import (
    GStreamerApp, app_callback_class
)
# endregion imports

# -----------------------------------------------------------------------------------------------
# Config paths
# -----------------------------------------------------------------------------------------------
SOURCE_FOLDER = r"R:\01-Organize\01-Management\01-Data Center\Brisk\06-AI & Machine Learning (D0340)\04-IOT_Smartfarm\picture_topview_smartfarm"
SAVE_PATH     = "/home/brisk/netdrive/01-Organize/01-Management/01-Data Center/Brisk/06-AI & Machine Learning (D0340)/04-IOT_Smartfarm/picture_result_topview"
os.makedirs(SAVE_PATH, exist_ok=True)

# -----------------------------------------------------------------------------------------------
# Utility: หาภาพล่าสุดในโฟลเดอร์
# -----------------------------------------------------------------------------------------------
def get_latest_image(folder_path: str) -> str:
    files = [os.path.join(folder_path, f) for f in os.listdir(folder_path)
             if f.lower().endswith((".jpg", ".jpeg", ".png"))]
    if not files:
        raise FileNotFoundError(f"No images found in {folder_path}")
    latest_file = max(files, key=os.path.getmtime)
    return latest_file

# -----------------------------------------------------------------------------------------------
# User Callback
# -----------------------------------------------------------------------------------------------
class user_app_callback_class(app_callback_class):
    def __init__(self):
        super().__init__()

def app_callback(pad, info, user_data):
    user_data.increment()
    string_to_print = f"Frame count: {user_data.get_count()}\n"
    buffer = info.get_buffer()
    if buffer is None:
        return Gst.PadProbeReturn.OK

    detections = hailo.get_roi_from_buffer(buffer).get_objects_typed(hailo.HAILO_DETECTION)

    if detections:
        caps = pad.get_current_caps()
        structure = caps.get_structure(0)
        width = structure.get_value("width")
        height = structure.get_value("height")
        data = buffer.extract_dup(0, buffer.get_size())

        np_image = np.frombuffer(data, dtype=np.uint8).reshape((height, width, 3))
        image = Image.fromarray(np_image)
        draw = ImageDraw.Draw(image)

        try:
            font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 20)
        except:
            font = ImageFont.load_default()

        for detection in detections:
            bbox = detection.get_bbox()
            label = detection.get_label()
            confidence = detection.get_confidence()

            x1 = int(bbox.xmin() * width)
            y1 = int(bbox.ymin() * height)
            x2 = int(bbox.xmax() * width)
            y2 = int(bbox.ymax() * height)

            draw.rectangle([x1, y1, x2, y2], outline="blue", width=2)

            text = f"{label} {confidence:.0%}"
            bbox_text = draw.textbbox((0, 0), text, font=font)
            text_width = bbox_text[2] - bbox_text[0]
            text_height = bbox_text[3] - bbox_text[1]

            text_y = max(y1 - text_height - 5, 0)
            draw.rectangle([x1, text_y, x1 + text_width + 10, text_y + text_height + 5], fill="blue")
            draw.text((x1 + 5, text_y + 2), text, fill="white", font=font)

            string_to_print += (f"Detection: {label} Confidence: {confidence:.2f} "
                                f"Box: ({x1},{y1},{x2},{y2})\n")

        image_path = os.path.join(SAVE_PATH, f"result_topview_{user_data.get_count()}.jpg")
        image.save(image_path)

        string_to_print += f"Image saved to: {image_path}\n"
        print(string_to_print)
    else:
        print(f"Frame count: {user_data.get_count()} - No detections")

    return Gst.PadProbeReturn.OK

# -----------------------------------------------------------------------------------------------
# Custom GStreamer App (แก้ให้ใช้ image แทน video)
# -----------------------------------------------------------------------------------------------
class GStreamerDetectionApp(GStreamerApp):
    def __init__(self, app_callback, user_data, parser=None):
        if parser is None:
            parser = get_default_parser()
        parser.add_argument(
            "--labels-json",
            default=None,
            help="Path to custom labels JSON file",
        )
        super().__init__(parser, user_data)

        self.video_width = 640
        self.video_height = 360
        self.batch_size = 1

        nms_score_threshold = 0.3
        nms_iou_threshold = 0.45

        if self.options_menu.arch is None:
            detected_arch = detect_hailo_arch()
            if detected_arch is None:
                raise ValueError("Could not auto-detect Hailo architecture. Please specify --arch manually.")
            self.arch = detected_arch
            print(f"Auto-detected Hailo architecture: {self.arch}")
        else:
            self.arch = self.options_menu.arch

        if self.options_menu.hef_path is not None:
            self.hef_path = self.options_menu.hef_path
        else:
            self.hef_path = get_resource_path(
                pipeline_name=SIMPLE_DETECTION_PIPELINE,
                resource_type=RESOURCES_MODELS_DIR_NAME,
            )
        print(f"Using HEF path: {self.hef_path}")

        self.post_process_so = get_resource_path(
            pipeline_name=SIMPLE_DETECTION_PIPELINE,
            resource_type=RESOURCES_SO_DIR_NAME,
            model=SIMPLE_DETECTION_POSTPROCESS_SO_FILENAME
        )
        print(f"Using post-process shared object: {self.post_process_so}")

        self.post_function_name = SIMPLE_DETECTION_POSTPROCESS_FUNCTION
        self.labels_json = self.options_menu.labels_json
        self.app_callback = app_callback
        self.thresholds_str = (
            f"nms-score-threshold={nms_score_threshold} "
            f"nms-iou-threshold={nms_iou_threshold} "
            f"output-format-type=HAILO_FORMAT_TYPE_FLOAT32"
        )

        setproctitle.setproctitle(SIMPLE_DETECTION_APP_TITLE)
        self.create_pipeline()

    def get_pipeline_string(self):
        latest_img = get_latest_image(SOURCE_FOLDER)
        print(f"Using latest image: {latest_img}")

        # เปลี่ยนจาก SOURCE_PIPELINE → filesrc + decodebin
        source_pipeline = f"filesrc location=\"{latest_img}\" ! decodebin ! videoconvert"

        detection_pipeline = INFERENCE_PIPELINE(
            hef_path=self.hef_path,
            post_process_so=self.post_process_so,
            post_function_name=self.post_function_name,
            batch_size=self.batch_size,
            config_json=self.labels_json,
            additional_params=self.thresholds_str
        )
        user_callback_pipeline = USER_CALLBACK_PIPELINE()

        pipeline_string = (
            f"{source_pipeline} ! "
            f"{detection_pipeline} ! "
            f"{user_callback_pipeline}"
        )
        print("Pipeline:", pipeline_string)
        return pipeline_string

# -----------------------------------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------------------------------
if __name__ == "__main__":
    project_root = Path(__file__).resolve().parent.parent
    env_file     = project_root / ".env"
    os.environ["HAILO_ENV_FILE"] = str(env_file)

    user_data = user_app_callback_class()
    app = GStreamerDetectionApp(app_callback, user_data)
    app.run()

    print("✅ Processing finished. Check results in:", SAVE_PATH)
